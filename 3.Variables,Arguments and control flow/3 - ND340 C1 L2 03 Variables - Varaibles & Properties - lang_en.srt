1
00:00:00,000 --> 00:00:05,925
This section introduces variable and its types in your UiPath.

2
00:00:05,925 --> 00:00:12,510
Variables are containers that are used to store multiple types of data.

3
00:00:12,510 --> 00:00:17,205
Using variables makes it easier to label and store

4
00:00:17,205 --> 00:00:22,050
data which can later be used throughout the automation process.

5
00:00:22,050 --> 00:00:28,260
A variable has an initial value which may change during the program.

6
00:00:28,260 --> 00:00:32,940
The value of a variable can change through external input,

7
00:00:32,940 --> 00:00:37,675
data manipulation, or passing from one activity to another.

8
00:00:37,675 --> 00:00:42,605
A collection variable contains multiple data entries of same type.

9
00:00:42,605 --> 00:00:48,710
It is useful to think of a variable like a box that stores data.

10
00:00:48,710 --> 00:00:52,420
For example, a variable named counter

11
00:00:52,420 --> 00:00:57,925
tracks the number of times the user clicked on a specific item.

12
00:00:57,925 --> 00:01:02,790
The user can configure a variable through its properties.

13
00:01:02,790 --> 00:01:05,775
Variables have the following properties.

14
00:01:05,775 --> 00:01:08,680
The first property is name.

15
00:01:08,680 --> 00:01:12,320
The name of a variable is its unique ID.

16
00:01:12,320 --> 00:01:18,685
It represents the title of the information that has been stored by the variable.

17
00:01:18,685 --> 00:01:25,295
A variable should be named to represent all possible values that it might contain.

18
00:01:25,295 --> 00:01:28,205
The name is essential in programming

19
00:01:28,205 --> 00:01:32,905
because the user access the variable through the name.

20
00:01:32,905 --> 00:01:36,230
Every variable must have a unique name,

21
00:01:36,230 --> 00:01:43,865
and it should be descriptive enough so that other users can easily read it and save time.

22
00:01:43,865 --> 00:01:47,230
The second property is type.

23
00:01:47,230 --> 00:01:53,255
Type defines the kind of data that a variable is intended to store.

24
00:01:53,255 --> 00:01:56,990
The type is declared when the variable is created.

25
00:01:56,990 --> 00:02:00,170
There are some specific types that are more

26
00:02:00,170 --> 00:02:04,625
generic and can accommodate different types of data.

27
00:02:04,625 --> 00:02:09,980
The most common universal types of variables are string,

28
00:02:09,980 --> 00:02:13,055
integer, array, date time,

29
00:02:13,055 --> 00:02:15,650
Boolean, and data tables.

30
00:02:15,650 --> 00:02:18,380
The third property is value.

31
00:02:18,380 --> 00:02:22,325
Value is the data that a variable holds.

32
00:02:22,325 --> 00:02:26,955
The value of a variable changes throughout the process.

33
00:02:26,955 --> 00:02:32,990
Suppose a variable named task is assigned a value 12 initially.

34
00:02:32,990 --> 00:02:37,940
At another point, task may be assigned the value 27.

35
00:02:37,940 --> 00:02:43,130
If no initial value is assigned at the creation of the variable,

36
00:02:43,130 --> 00:02:47,165
a default rule assigns a value to the variable.

37
00:02:47,165 --> 00:02:50,885
The forth and and the last property is scope.

38
00:02:50,885 --> 00:02:57,085
Scope defines from where the variable can be accessed in the workflow.

39
00:02:57,085 --> 00:03:01,345
The variables can be broad or specific.

40
00:03:01,345 --> 00:03:06,890
When the user defines a variable for the first time through the variable panel,

41
00:03:06,890 --> 00:03:08,870
it has a broad scope.

42
00:03:08,870 --> 00:03:13,925
That is, it can be accessed from every part of the program.

43
00:03:13,925 --> 00:03:18,200
If the user defines a variable with a specific scope,

44
00:03:18,200 --> 00:03:22,010
then outside processes cannot access it.

45
00:03:22,010 --> 00:03:25,480
There are always several variables in use,

46
00:03:25,480 --> 00:03:29,375
so the user should avoid making multiple variables

47
00:03:29,375 --> 00:03:34,740
unnecessarily broader as it may cause efficiency issues.

