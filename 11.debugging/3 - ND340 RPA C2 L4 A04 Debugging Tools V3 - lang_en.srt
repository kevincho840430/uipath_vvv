1
00:00:00,000 --> 00:00:04,155
The process of identifying error or bug

2
00:00:04,155 --> 00:00:08,580
in the running software or robot is called debugging.

3
00:00:08,580 --> 00:00:13,740
It ensures that the error is identified and resolved so

4
00:00:13,740 --> 00:00:18,990
that it does not impact the operation and the running of the robot.

5
00:00:18,990 --> 00:00:22,440
It is a multi-step process that ensures that

6
00:00:22,440 --> 00:00:27,075
the program to develop a software or application is perfect.

7
00:00:27,075 --> 00:00:30,690
Debugging helps in maintaining the quality and

8
00:00:30,690 --> 00:00:34,870
continuity of the code by resolving the errors.

9
00:00:34,870 --> 00:00:40,760
It is the most important method by which developers identify the error or

10
00:00:40,760 --> 00:00:46,655
[inaudible] in the developed code and make changes to get error-free program.

11
00:00:46,655 --> 00:00:48,950
In the robotic process automation,

12
00:00:48,950 --> 00:00:54,109
various tools have been provided by Uipath studio for debugging.

13
00:00:54,109 --> 00:00:59,839
These tools are helpful to check the workflow of the programming structure,

14
00:00:59,839 --> 00:01:01,609
and find the exception.

15
00:01:01,609 --> 00:01:05,570
Apart from this, debugging also helps in checking

16
00:01:05,570 --> 00:01:11,855
the execution process of each data point that is validated or checked.

17
00:01:11,855 --> 00:01:17,165
On starting debug three panel appears on the workstation screen.

18
00:01:17,165 --> 00:01:20,480
The local panel, the output panel,

19
00:01:20,480 --> 00:01:23,140
and the property inspector panel.

20
00:01:23,140 --> 00:01:25,145
Apart from these three panel,

21
00:01:25,145 --> 00:01:30,410
we also have some more panels available which we will discuss after them.

22
00:01:30,410 --> 00:01:33,785
The local panel, once we click on the brake,

23
00:01:33,785 --> 00:01:39,875
a workflow that holds the data variable running in debugging mode appears on the screen.

24
00:01:39,875 --> 00:01:43,325
The local panel will show the values of

25
00:01:43,325 --> 00:01:49,415
all the variables and highlight the recently executing activity in yellow color,

26
00:01:49,415 --> 00:01:52,145
which helps to find the data path.

27
00:01:52,145 --> 00:01:55,280
However, all these things can happen

28
00:01:55,280 --> 00:01:59,240
only when the data convention is assigned accurately.

29
00:01:59,240 --> 00:02:03,995
The output panel is an essential panel in the RPA debugging.

30
00:02:03,995 --> 00:02:08,210
It displays the detailed log of the current state of

31
00:02:08,210 --> 00:02:14,015
the workflow and the status of all activities executed by the robot.

32
00:02:14,015 --> 00:02:20,140
The properties inspector panel is used to show the active action properties.

33
00:02:20,140 --> 00:02:25,535
Variable values, declaration, and debugging in the different data scope.

34
00:02:25,535 --> 00:02:30,245
The immediate panel is only visible during debugging,

35
00:02:30,245 --> 00:02:37,145
and it can be used for inspecting data available at a certain point during debugging.

36
00:02:37,145 --> 00:02:42,245
It can evaluate variables, arguments, or statements.

37
00:02:42,245 --> 00:02:44,390
To do so, simply type

38
00:02:44,390 --> 00:02:49,735
the variable or argument name in the immediate window and press enter.

39
00:02:49,735 --> 00:02:53,375
The immediate panel keeps the history of

40
00:02:53,375 --> 00:02:56,810
previous evaluated statement and they can be

41
00:02:56,810 --> 00:03:01,000
removed using the clear or context menu option.

42
00:03:01,000 --> 00:03:04,280
To remove a single line from the panel,

43
00:03:04,280 --> 00:03:07,775
select the text and press the space key.

44
00:03:07,775 --> 00:03:14,345
When clicking inside a line and starting to type the text is added to the input field.

45
00:03:14,345 --> 00:03:19,160
The call stack panel displays the next activity to be

46
00:03:19,160 --> 00:03:25,235
executed and its parent container when the project is paused in debugging.

47
00:03:25,235 --> 00:03:30,125
The panel, is displayed during execution in debug mode,

48
00:03:30,125 --> 00:03:36,035
it gets populated after using step into break, slow step,

49
00:03:36,035 --> 00:03:42,575
or after the execution was paused because an error or breakpoint was encountered.

50
00:03:42,575 --> 00:03:46,534
Double-clicking an item in the call stack panel focuses

51
00:03:46,534 --> 00:03:50,585
and highlights the selected activity in the designer panel.

52
00:03:50,585 --> 00:03:54,785
If an activity throws an exception during debugging,

53
00:03:54,785 --> 00:04:00,455
it is marked in the call stack panel and the activity is highlighted in red.

54
00:04:00,455 --> 00:04:02,825
Similar to the call stack panel,

55
00:04:02,825 --> 00:04:06,635
the watch panel is only visible during debugging.

56
00:04:06,635 --> 00:04:10,910
It can be set to display the values of variables,

57
00:04:10,910 --> 00:04:15,605
arguments, and user-defined expressions that are in scope.

58
00:04:15,605 --> 00:04:22,250
These values are updated after each activity execution while debugging.

59
00:04:22,250 --> 00:04:26,360
The breakpoint panel, displays all the breakpoints in

60
00:04:26,360 --> 00:04:31,460
the current project together with the file in which they are [inaudible].

61
00:04:31,460 --> 00:04:36,430
The activity name column shows the activity we did toggle the breakpoint.

62
00:04:36,430 --> 00:04:41,570
While the file path column displays the file and its location.

63
00:04:41,570 --> 00:04:45,725
The condition column displays condition set to break point.

64
00:04:45,725 --> 00:04:51,680
The log message column shows messages to be logged if the condition is met,

65
00:04:51,680 --> 00:04:58,710
hover over the breakpoint tag or an activity to view its condition and the log message.

